---
- name: "------------ Diagnostic :  Create an application and test that it deploys correctly. ---------  "
  shell: " oc adm diagnostics appcreate "
  register: "output"
  ignore_errors: yes

  when: diagnostic.deploy_app
- debug: var=output.stdout_lines 


- name: "------------ Diagnostic : Check that there is a working Docker registry ---------- "
  shell: " oc adm diagnostics clusterregistry "
  register: "output"
  ignore_errors: yes
 
  when: diagnostic.clusterregistry
- debug: var=output.stdout_lines



- name: "------------ Diagnostic : Check that the default ClusterRoleBindings are present and contain the expected subjects ---------  "
  shell: " oc adm diagnostics clusterrolebindings"
  register: "output"
  ignore_errors: yes

  when: diagnostic.clusterrolebindings
- debug: var=output.stdout_lines

- name: "------------ Diagnostic :Check that the default SecurityContextConstraints are present and contain the expected permissions ---------  "
  shell: " oc adm diagnostics securitycontextconstraints "
  register: "output"
  ignore_errors: yes

  when: diagnostic.securitycontextconstraints
- debug: var=output.stdout_lines


- name: "------------ Diagnostic :  Check that the default ClusterRoles are present and contain the expected permissions   ---------  "
  shell: " oc adm diagnostics clusterroles "
  register: "output"
  ignore_errors: yes

  when: diagnostic.clusterroles
- debug: var=output.stdout_lines


- name: "------------ Diagnostic : Check there is a working router  ---------  "
  shell: " oc adm diagnostics clusterrouter "
  register: "output"
  ignore_errors: yes

  when: diagnostic.clusterrouter
- debug: var=output.stdout_lines



- name: "------------ Diagnostic : Create a pod to run diagnostics from the application standpoint  ---------  "
  shell: " oc adm diagnostics diagnosticpod "
  register: "output"
  ignore_errors: yes

  when: diagnostic.diagnosticpod
- debug: var=output.stdout_lines


- name: "------------ Diagnostic : Create a pod on all schedulable nodes and run network diagnostics from the application standpoint  ---------  "
  shell: " oc adm diagnostics networkcheck "
  register: "output"
  ignore_errors: yes

  when: diagnostic.networkcheck
- debug: var=output.stdout_lines

- name: "------------ Diagnostic : nodedefinitions ---------  "
  shell: " oc adm diagnostics nodedefinitions "
  register: "output"
  ignore_errors: yes
  when: diagnostic.nodedefinitions
- debug: var=output.stdout_lines

- name: "------------ Diagnostic : Check all route certificates for certificates that might be rejected by extended   validation.   ---------  "
  shell: " oc adm diagnostics routecertificatevalidation "
  register: "output"
  ignore_errors: yes
  when: diagnostic.routecertificatevalidation
- debug: var=output.stdout_lines

- name: "------------ Diagnostic : Check that the default SecurityContextConstraints are present and contain the expected permissions  ---------  "
  shell: " oc adm diagnostics securitycontextconstraints "
  register: "output"
  ignore_errors: yes

  when: diagnostic.securitycontextconstraints
- debug: var=output.stdout_lines

- name: "------------ Diagnostic :  Check for recent problems in systemd service logs  ---------  "
  shell: " oc adm diagnostics analyzelogs "
  register: "output"
  ignore_errors: yes

  when: diagnostic.analyzelogs
- debug: var=output.stdout_lines

